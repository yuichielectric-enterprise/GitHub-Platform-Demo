name: Deploy Container via PR

# Controls when the action will run. 
on:
  issue_comment:
    types: [created]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  issue_ops:
    name: "Extract Issue Ops Values From PR"
    runs-on: ubuntu-latest
    if: | 
      (${{ github.event.issue.pull_request }}  &&
      contains(github.event.comment.body,'/deploy'))
    outputs:
        app_service_name: ${{ steps.set_env_values.outputs.app_service_name }}
    
    steps:
      - name: "Checkout"
        uses: actions/checkout@master

      - uses: rishabhgupta/split-by@v1
        id: split
        with:
          string: ${{ github.event.comment.body}}
          split-by: '#'
      - run: | 
          echo "${{ steps.split.outputs._1}}"

      ## Issue Ops - Extract information from JSON - Local Action
      - name: Extract Issue Demo Specification
        id: issue_body
        uses: peter-murray/issue-body-parser-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          issue_id: ${{ steps.split.outputs._1}}
      
      - name: Set JSON Variables as Output Values
        id: set_env_values
        run: | 
          for s in $(echo '${{ steps.issue_body.outputs.payload }}' | jq -r "to_entries|map(\"\(.key)::\(.value|tostring)\")|.[]" ); do
          echo '::set-output name='"$s"''
          done
          
      - name: Set App Service Output Step
        id: app_serviceName
        run: echo "::set-output name=app_serviceName::${{ steps.set_env_values.outputs.app_service_name }}"

  build-and-test:
    name: ðŸ§ª Build and Test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node: ['10.x', '12.x', '14.x']
    
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node }}
    - name: npm install, build, and test
      run: |
        # Build and test the project
        npm install
        npm run build --if-present
        npm run test --if-present
    
  docker-build-and-push:
    name: Build and push
    runs-on: ubuntu-latest
    needs: [issue_ops, build-and-test]
    steps:
    - uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to Container Registry
      uses: docker/login-action@v1 
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GHCR_PASSWORD }}
        
    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ghcr.io/octodemo/demoday-node:${{ github.event.pull_request.head.sha || github.sha }}

  azure-deployment-staging:
    name: ðŸ“¦ Azure deployment staging
    runs-on: ubuntu-latest
    needs: [issue_ops, build-and-test, docker-build-and-push]
    environment:
      name: STAGING
      url: "https://${{ needs.issue_ops.outputs.app_service_name }}-staging.azurewebsites.net/"
    steps:
    - uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ needs.issue_ops.outputs.app_service_name }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        images: 'ghcr.io/octodemo/demoday-node:${{ github.event.pull_request.head.sha || github.sha }}'
        slot-name: staging
    
    - name: Load Deployment
      timeout-minutes: 2
      continue-on-error: true
      run: curl https://${{ needs.issue_ops.outputs.app_service_name }}-staging.azurewebsites.net

  azure-deployment-production:
    name: ðŸ“¦ Azure deployment production
    runs-on: ubuntu-latest
    needs: [issue_ops, build-and-test, docker-build-and-push, azure-deployment-staging]
    environment:
      name: PRODUCTION
      url: "https://${{ needs.issue_ops.outputs.app_service_name }}.azurewebsites.net/"
    steps:
    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDS }}
    - uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ needs.issue_ops.outputs.app_service_name }}
        images: 'ghcr.io/octodemo/demoday-node:${{ github.event.pull_request.head.sha || github.sha }}'
        slot-name: production